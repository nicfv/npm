#!/usr/bin/env bash

# Fail if node or npm not found
node -v || exit 1
npm -v || exit 1

# Capture today's date
today="$(date '+%B %-d, %Y')"

# Check for publish flag
publish=false
if [[ "${1}" == 'publish' ]] ; then
    publish=true
fi

# Check for and set npm token
if "${publish}" ; then
    if [[ -z "${NPM_TOKEN}" ]] ; then
        echo 'Missing environment variable NPM_TOKEN'
        exit 1
    else
        mkdir .docs || exit 1
        npm config set '//registry.npmjs.org/:_authToken' "${NPM_TOKEN}"
    fi
fi

for dir in */ ; do
    npx -y wag "Checking directory '${dir}'"
    # Skip directories that are not an npm project
    npm --silent v "${dir}" || {
        echo "${dir} is not an NPM project"
        continue
    }
    # Set working directory to package directory
    cd "${dir}" || exit 1
    # Extract package name, changelog version, and package version
    package_name="$(npm --silent v . name)"
    echo "Package Name   = ${package_name}"
    package_desc="$(npm --silent v . description)"
    echo "Package Name   = ${package_desc}"
    local_version="$(npm --silent v . version)"
    echo "Local Version  = ${local_version}"
    log_version="$(grep -oE '[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -n1)"
    echo "Log Version    = ${log_version}"
    # Make sure package.json and changelog versions match
    if [[ "${local_version}" != "${log_version}" ]] ; then
        echo 'Package and changelog versions do not match!'
        exit 1
    fi
    # Install dependencies and run test script
    echo 'Installing dependencies...'
    npm i
    echo 'Running tests...'
    npm test || exit 1
    if "${publish}" ; then
        # Determine latest published version on the registry
        npm_version="$(npm --silent v "${package_name}" version)"
        echo "Version on NPM = ${npm_version}"
        if [[ "${local_version}" == "${npm_version}" ]] ; then
            echo 'Skipping publish step'
        else
            echo 'Publishing...'
            npm publish
        fi
        # Copy over the template readme file
        # and replace template variables
        cp '../.github/workflows/template.md' .
        awk "{gsub(/%NAME%/,\"${package_name/\"/\\\"}\");print}" template.md > tmp && mv tmp template.md
        awk "{gsub(/%DESC%/,\"${package_desc/\"/\\\"}\");print}" template.md > tmp && mv tmp template.md
        awk "{gsub(/%DIR%/,\"${dir/\"/\\\"}\");print}" template.md > tmp && mv tmp template.md
        awk "{gsub(/%VER%/,\"${local_version/\"/\\\"}\");print}" template.md > tmp && mv tmp template.md
        awk "{gsub(/%DATE%/,\"${today/\"/\\\"}\");print}" template.md > tmp && mv tmp template.md
        cat README.md >> template.md && mv template.md README.md
        # Always generate documentation because if only one
        # package generates documentation, then it will
        # overwrite the GH pages archive with that dir only
        echo 'Generating documentation...'
        npm run docs
        mv docs "../.docs/${dir}"
    fi
    cd ..
done